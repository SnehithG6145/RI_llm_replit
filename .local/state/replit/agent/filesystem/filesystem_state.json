{"file_contents":{"client/src/components/examples/VerificationQueue.tsx":{"content":"import { useState } from \"react\";\nimport { VerificationQueue } from \"../VerificationQueue\";\nimport infographic1 from \"@assets/stock_images/infographic_design_w_7b77ce39.jpg\";\nimport infographic2 from \"@assets/stock_images/infographic_design_w_81ae4f32.jpg\";\nimport avatar1 from \"@assets/stock_images/professional_researc_f4eae1c5.jpg\";\nimport avatar2 from \"@assets/stock_images/professional_researc_0c22873e.jpg\";\n\ntype Status = \"approved\" | \"pending\" | \"rejected\";\n\nexport default function VerificationQueueExample() {\n  const [submissions, setSubmissions] = useState<Array<{\n    id: string;\n    title: string;\n    researcher: { name: string; avatar: string };\n    tags: string[];\n    status: Status;\n    submittedDate: string;\n    coverImage: string;\n  }>>([\n    {\n      id: \"1\",\n      title: \"The Impact of Blue Light on Sleep Quality\",\n      researcher: { name: \"Dr. Sarah Chen\", avatar: avatar1 },\n      tags: [\"Health\", \"Technology\"],\n      status: \"pending\",\n      submittedDate: \"1 hour ago\",\n      coverImage: infographic1,\n    },\n    {\n      id: \"2\",\n      title: \"Microplastics in Ocean Ecosystems\",\n      researcher: { name: \"Dr. Marcus Kim\", avatar: avatar2 },\n      tags: [\"Environment\", \"Biology\"],\n      status: \"approved\",\n      submittedDate: \"3 hours ago\",\n      coverImage: infographic2,\n    },\n  ]);\n\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <VerificationQueue\n        submissions={submissions}\n        onApprove={(id) => {\n          setSubmissions(\n            submissions.map((s) =>\n              s.id === id ? { ...s, status: \"approved\" as const } : s\n            )\n          );\n        }}\n        onReject={(id) => {\n          setSubmissions(\n            submissions.map((s) =>\n              s.id === id ? { ...s, status: \"rejected\" as const } : s\n            )\n          );\n        }}\n        onView={(id) => console.log(\"View:\", id)}\n      />\n    </div>\n  );\n}\n","size_bytes":1900},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        success: \"hsl(142 76% 36%)\",\n        warning: \"hsl(38 92% 50%)\",\n        error: \"hsl(0 84% 60%)\",\n        info: \"hsl(200 98% 39%)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4190},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/examples/InfographicCard.tsx":{"content":"import { InfographicCard } from \"../InfographicCard\";\nimport infographic1 from \"@assets/stock_images/infographic_design_w_7b77ce39.jpg\";\nimport avatar1 from \"@assets/stock_images/professional_researc_f4eae1c5.jpg\";\n\nexport default function InfographicCardExample() {\n  return (\n    <div className=\"p-4 max-w-sm\">\n      <InfographicCard\n        id=\"1\"\n        title=\"Sitting Is The New Smoking: Breaking The Sedentary Cycle\"\n        coverImage={infographic1}\n        tags={[\"Health\", \"Workplace\"]}\n        researcher={{\n          name: \"Dr. Emily Johnson\",\n          avatar: avatar1,\n          verified: true,\n        }}\n        date=\"2 days ago\"\n        onClick={() => console.log(\"Card clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":725},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/examples/FeedToggle.tsx":{"content":"import { useState } from \"react\";\nimport { FeedToggle } from \"../FeedToggle\";\n\nexport default function FeedToggleExample() {\n  const [value, setValue] = useState<\"for-you\" | \"explore\">(\"for-you\");\n\n  return (\n    <div className=\"p-4\">\n      <FeedToggle value={value} onChange={setValue} />\n      <p className=\"mt-4 text-sm text-muted-foreground\">\n        Current tab: {value === \"for-you\" ? \"For You\" : \"Explore\"}\n      </p>\n    </div>\n  );\n}\n","size_bytes":443},"server/storage.ts":{"content":"import {\n  users,\n  tags,\n  infographics,\n  infographicTags,\n  userTagPreferences,\n  type User,\n  type UpsertUser,\n  type Tag,\n  type InsertTag,\n  type Infographic,\n  type InsertInfographic,\n  type InsertInfographicTag,\n  type InsertUserTagPreference,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, inArray, desc, sql } from \"drizzle-orm\";\n\n// Interface for all storage operations\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserRole(userId: string, role: string): Promise<User | undefined>;\n  \n  // Tag operations\n  getAllTags(): Promise<Tag[]>;\n  getTagById(id: string): Promise<Tag | undefined>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  deleteTag(id: string): Promise<void>;\n  \n  // Infographic operations\n  getInfographicById(id: string): Promise<Infographic | undefined>;\n  getInfographicsByStatus(status: string): Promise<Infographic[]>;\n  getApprovedInfographics(): Promise<Infographic[]>;\n  getInfographicsByResearcher(researcherId: string): Promise<Infographic[]>;\n  createInfographic(infographic: InsertInfographic): Promise<Infographic>;\n  updateInfographicStatus(id: string, status: string, reviewedBy: string, rejectionReason?: string): Promise<Infographic | undefined>;\n  \n  // Infographic-Tag associations\n  addTagsToInfographic(infographicId: string, tagIds: string[]): Promise<void>;\n  getInfographicTags(infographicId: string): Promise<Tag[]>;\n  getInfographicsByTagIds(tagIds: string[]): Promise<Infographic[]>;\n  \n  // User tag preferences\n  getUserTagPreferences(userId: string): Promise<Tag[]>;\n  addUserTagPreference(userId: string, tagId: string): Promise<void>;\n  removeUserTagPreference(userId: string, tagId: string): Promise<void>;\n  getPersonalizedInfographics(userId: string): Promise<Infographic[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(userId: string, role: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Tag operations\n  async getAllTags(): Promise<Tag[]> {\n    return await db.select().from(tags).orderBy(tags.name);\n  }\n\n  async getTagById(id: string): Promise<Tag | undefined> {\n    const [tag] = await db.select().from(tags).where(eq(tags.id, id));\n    return tag;\n  }\n\n  async createTag(tag: InsertTag): Promise<Tag> {\n    const [newTag] = await db.insert(tags).values(tag).returning();\n    return newTag;\n  }\n\n  async deleteTag(id: string): Promise<void> {\n    await db.delete(tags).where(eq(tags.id, id));\n  }\n\n  // Infographic operations\n  async getInfographicById(id: string): Promise<Infographic | undefined> {\n    const [infographic] = await db.select().from(infographics).where(eq(infographics.id, id));\n    return infographic;\n  }\n\n  async getInfographicsByStatus(status: string): Promise<Infographic[]> {\n    return await db\n      .select()\n      .from(infographics)\n      .where(eq(infographics.status, status))\n      .orderBy(desc(infographics.createdAt));\n  }\n\n  async getApprovedInfographics(): Promise<Infographic[]> {\n    return await db\n      .select()\n      .from(infographics)\n      .where(eq(infographics.status, 'approved'))\n      .orderBy(desc(infographics.createdAt));\n  }\n\n  async getInfographicsByResearcher(researcherId: string): Promise<Infographic[]> {\n    return await db\n      .select()\n      .from(infographics)\n      .where(eq(infographics.researcherId, researcherId))\n      .orderBy(desc(infographics.createdAt));\n  }\n\n  async createInfographic(infographic: InsertInfographic): Promise<Infographic> {\n    const [newInfographic] = await db.insert(infographics).values(infographic).returning();\n    return newInfographic;\n  }\n\n  async updateInfographicStatus(\n    id: string,\n    status: string,\n    reviewedBy: string,\n    rejectionReason?: string\n  ): Promise<Infographic | undefined> {\n    const [updated] = await db\n      .update(infographics)\n      .set({\n        status,\n        reviewedBy,\n        reviewedAt: new Date(),\n        rejectionReason: rejectionReason || null,\n        updatedAt: new Date(),\n      })\n      .where(eq(infographics.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Infographic-Tag associations\n  async addTagsToInfographic(infographicId: string, tagIds: string[]): Promise<void> {\n    if (tagIds.length === 0) return;\n    \n    const values = tagIds.map(tagId => ({\n      infographicId,\n      tagId,\n    }));\n    \n    await db.insert(infographicTags).values(values).onConflictDoNothing();\n  }\n\n  async getInfographicTags(infographicId: string): Promise<Tag[]> {\n    const result = await db\n      .select({\n        id: tags.id,\n        name: tags.name,\n        description: tags.description,\n        createdAt: tags.createdAt,\n        createdBy: tags.createdBy,\n      })\n      .from(infographicTags)\n      .innerJoin(tags, eq(infographicTags.tagId, tags.id))\n      .where(eq(infographicTags.infographicId, infographicId));\n    \n    return result;\n  }\n\n  async getInfographicsByTagIds(tagIds: string[]): Promise<Infographic[]> {\n    if (tagIds.length === 0) return await this.getApprovedInfographics();\n    \n    const result = await db\n      .select({\n        infographic: infographics,\n      })\n      .from(infographicTags)\n      .innerJoin(infographics, eq(infographicTags.infographicId, infographics.id))\n      .where(\n        and(\n          inArray(infographicTags.tagId, tagIds),\n          eq(infographics.status, 'approved')\n        )\n      )\n      .orderBy(desc(infographics.createdAt));\n    \n    return result.map(r => r.infographic);\n  }\n\n  // User tag preferences\n  async getUserTagPreferences(userId: string): Promise<Tag[]> {\n    const result = await db\n      .select({\n        id: tags.id,\n        name: tags.name,\n        description: tags.description,\n        createdAt: tags.createdAt,\n        createdBy: tags.createdBy,\n      })\n      .from(userTagPreferences)\n      .innerJoin(tags, eq(userTagPreferences.tagId, tags.id))\n      .where(eq(userTagPreferences.userId, userId));\n    \n    return result;\n  }\n\n  async addUserTagPreference(userId: string, tagId: string): Promise<void> {\n    await db\n      .insert(userTagPreferences)\n      .values({ userId, tagId })\n      .onConflictDoNothing();\n  }\n\n  async removeUserTagPreference(userId: string, tagId: string): Promise<void> {\n    await db\n      .delete(userTagPreferences)\n      .where(\n        and(\n          eq(userTagPreferences.userId, userId),\n          eq(userTagPreferences.tagId, tagId)\n        )\n      );\n  }\n\n  async getPersonalizedInfographics(userId: string): Promise<Infographic[]> {\n    const userTags = await this.getUserTagPreferences(userId);\n    const tagIds = userTags.map(tag => tag.id);\n    \n    if (tagIds.length === 0) {\n      // If no preferences, return all approved infographics\n      return await this.getApprovedInfographics();\n    }\n    \n    return await this.getInfographicsByTagIds(tagIds);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7611},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/lib/authUtils.ts":{"content":"// Based on blueprint:javascript_log_in_with_replit\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":168},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/replitAuth.ts":{"content":"// Replit Auth integration - based on blueprint:javascript_log_in_with_replit\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// Middleware to check if user has specific role\nexport function requireRole(...roles: string[]): RequestHandler {\n  return async (req, res, next) => {\n    const user = req.user as any;\n    \n    if (!req.isAuthenticated() || !user.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    try {\n      const dbUser = await storage.getUser(user.claims.sub);\n      \n      if (!dbUser || !roles.includes(dbUser.role)) {\n        return res.status(403).json({ message: \"Forbidden: Insufficient permissions\" });\n      }\n      \n      // Attach user info to request for convenience\n      (req as any).dbUser = dbUser;\n      next();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  };\n}\n","size_bytes":5045},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/hooks/useAuth.ts":{"content":"// Based on blueprint:javascript_log_in_with_replit\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    staleTime: Infinity,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":444},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/InfographicCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { TagPill } from \"./TagPill\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bookmark, Share2, CheckCircle2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface InfographicCardProps {\n  id: string;\n  title: string;\n  coverImage: string;\n  tags: string[];\n  researcher: {\n    name: string;\n    avatar?: string;\n    verified?: boolean;\n  };\n  date: string;\n  onClick: () => void;\n}\n\nexport function InfographicCard({\n  id,\n  title,\n  coverImage,\n  tags,\n  researcher,\n  date,\n  onClick,\n}: InfographicCardProps) {\n  return (\n    <Card\n      className=\"group overflow-hidden cursor-pointer hover-elevate active-elevate-2 transition-all\"\n      onClick={onClick}\n      data-testid={`card-infographic-${id}`}\n    >\n      <div className=\"relative aspect-[3/4] overflow-hidden\">\n        <img\n          src={coverImage}\n          alt={title}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent\" />\n        <div className=\"absolute top-3 right-3 flex gap-2 flex-wrap justify-end\">\n          {tags.slice(0, 2).map((tag) => (\n            <div\n              key={tag}\n              className=\"backdrop-blur-md bg-white/20 px-2 py-1 rounded-full\"\n            >\n              <span className=\"text-xs font-medium text-white uppercase tracking-wide\">\n                {tag}\n              </span>\n            </div>\n          ))}\n        </div>\n        <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n          <h3 className=\"text-xl font-serif font-semibold text-white leading-tight mb-2\">\n            {title}\n          </h3>\n        </div>\n      </div>\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={researcher.avatar} />\n              <AvatarFallback>{researcher.name[0]}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex items-center gap-1\">\n              <span className=\"text-sm font-medium\">{researcher.name}</span>\n              {researcher.verified && (\n                <CheckCircle2 className=\"h-4 w-4 text-success\" />\n              )}\n            </div>\n          </div>\n          <span className=\"text-xs text-muted-foreground\">{date}</span>\n        </div>\n        <div className=\"flex items-center justify-between mt-3\">\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={(e) => {\n                e.stopPropagation();\n                console.log(\"Bookmark clicked\");\n              }}\n              data-testid={`button-bookmark-${id}`}\n            >\n              <Bookmark className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8\"\n              onClick={(e) => {\n                e.stopPropagation();\n                console.log(\"Share clicked\");\n              }}\n              data-testid={`button-share-${id}`}\n            >\n              <Share2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3443},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/Admin.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AdminTagManager } from \"@/components/AdminTagManager\";\nimport { VerificationQueue } from \"@/components/VerificationQueue\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Tag, Infographic } from \"@shared/schema\";\n\nexport default function Admin() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tags = [] } = useQuery<Tag[]>({\n    queryKey: [\"/api/tags\"],\n  });\n\n  const { data: pendingInfographics = [] } = useQuery<Infographic[]>({\n    queryKey: [\"/api/admin/infographics/pending\"],\n    retry: false,\n  });\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || user?.role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need admin access to view this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, user, toast]);\n\n  const createTagMutation = useMutation({\n    mutationFn: async (data: { name: string; description?: string }) => {\n      return await apiRequest(\"/api/tags\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tags\"] });\n      toast({ title: \"Success\", description: \"Tag created successfully\" });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTagMutation = useMutation({\n    mutationFn: async (tagId: string) => {\n      return await apiRequest(`/api/tags/${tagId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tags\"] });\n      toast({ title: \"Success\", description: \"Tag deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: async ({ id, status, rejectionReason }: { id: string; status: string; rejectionReason?: string }) => {\n      return await apiRequest(`/api/admin/infographics/${id}/review`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ status, rejectionReason }),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/infographics/pending\"] });\n      toast({ title: \"Success\", description: \"Infographic reviewed successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to review infographic\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTag = (name: string, description?: string) => {\n    createTagMutation.mutate({ name, description });\n  };\n\n  const handleDeleteTag = (id: string) => {\n    deleteTagMutation.mutate(id);\n  };\n\n  const handleApprove = (id: string) => {\n    reviewMutation.mutate({ id, status: 'approved' });\n  };\n\n  const handleReject = (id: string, reason: string) => {\n    reviewMutation.mutate({ id, status: 'rejected', rejectionReason: reason });\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <h1 className=\"text-3xl font-serif font-bold mb-8\">Admin Dashboard</h1>\n\n      <Tabs defaultValue=\"verification\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"verification\" data-testid=\"tab-verification\">\n            Verification Queue ({pendingInfographics.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"tags\" data-testid=\"tab-tags\">\n            Tag Management ({tags.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"verification\" className=\"space-y-4\">\n          <VerificationQueue\n            submissions={pendingInfographics.map(inf => ({\n              id: inf.id,\n              title: (inf.sectionA as any)?.title || 'Untitled',\n              researcher: {\n                name: 'Researcher',\n                avatar: ''\n              },\n              tags: [],\n              status: inf.status,\n              submittedDate: new Date(inf.createdAt || '').toLocaleDateString(),\n              coverImage: '',\n            }))}\n            onApprove={handleApprove}\n            onReject={handleReject}\n            onView={(id) => console.log('View:', id)}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"tags\" className=\"space-y-4\">\n          <AdminTagManager\n            tags={tags.map(t => ({ id: t.id, name: t.name, usageCount: 0 }))}\n            onCreate={handleCreateTag}\n            onDelete={handleDeleteTag}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":5519},"client/src/components/examples/Navigation.tsx":{"content":"import { Navigation } from \"../Navigation\";\nimport { ThemeProvider } from \"../ThemeProvider\";\nimport infographicAvatar from \"@assets/stock_images/professional_researc_f4eae1c5.jpg\";\n\nexport default function NavigationExample() {\n  return (\n    <ThemeProvider>\n      <Navigation\n        userRole=\"researcher\"\n        userName=\"Dr. Sarah Chen\"\n        userAvatar={infographicAvatar}\n        onSearch={(q) => console.log(\"Search:\", q)}\n      />\n    </ThemeProvider>\n  );\n}\n","size_bytes":470},"client/src/components/examples/ResearcherUpload.tsx":{"content":"import { ResearcherUpload } from \"../ResearcherUpload\";\n\nexport default function ResearcherUploadExample() {\n  return (\n    <div className=\"p-4 max-w-2xl\">\n      <ResearcherUpload />\n    </div>\n  );\n}\n","size_bytes":201},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/InfographicViewer.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { VisuallyHidden } from \"@/components/ui/visually-hidden\";\n\ninterface InfographicSection {\n  id: string;\n  type: \"overview\" | \"methods\" | \"solution\";\n  title: string;\n  content: React.ReactNode;\n}\n\ninterface InfographicViewerProps {\n  open: boolean;\n  onClose: () => void;\n  sections: InfographicSection[];\n}\n\nexport function InfographicViewer({ open, onClose, sections }: InfographicViewerProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const goToNext = () => {\n    if (currentIndex < sections.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  };\n\n  const goToPrevious = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex(currentIndex - 1);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl h-[90vh] p-0 gap-0 bg-black/90\">\n        <VisuallyHidden>\n          <DialogTitle>Infographic Viewer</DialogTitle>\n        </VisuallyHidden>\n        <div className=\"relative w-full h-full flex items-center justify-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute top-4 right-4 z-50 text-white hover:bg-white/20\"\n            onClick={onClose}\n            data-testid=\"button-close-viewer\"\n          >\n            <X className=\"h-6 w-6\" />\n          </Button>\n\n          {currentIndex > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute left-4 z-40 text-white hover:bg-white/20\"\n              onClick={goToPrevious}\n              data-testid=\"button-previous-section\"\n            >\n              <ChevronLeft className=\"h-8 w-8\" />\n            </Button>\n          )}\n\n          {currentIndex < sections.length - 1 && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-4 z-40 text-white hover:bg-white/20\"\n              onClick={goToNext}\n              data-testid=\"button-next-section\"\n            >\n              <ChevronRight className=\"h-8 w-8\" />\n            </Button>\n          )}\n\n          <div className=\"w-full h-full overflow-auto p-8 flex items-center justify-center\">\n            <div className=\"bg-card rounded-md shadow-2xl max-w-3xl w-full p-8\">\n              {sections[currentIndex]?.content}\n            </div>\n          </div>\n\n          <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex gap-2\">\n            {sections.map((section, index) => (\n              <button\n                key={section.id}\n                onClick={() => setCurrentIndex(index)}\n                className={cn(\n                  \"h-2 w-2 rounded-full transition-all\",\n                  index === currentIndex\n                    ? \"bg-white w-8\"\n                    : \"bg-white/40 hover:bg-white/60\"\n                )}\n                data-testid={`button-section-${index}`}\n              />\n            ))}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3250},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/examples/InfographicViewer.tsx":{"content":"import { useState } from \"react\";\nimport { InfographicViewer } from \"../InfographicViewer\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function InfographicViewerExample() {\n  const [open, setOpen] = useState(false);\n\n  const sections = [\n    {\n      id: \"overview\",\n      type: \"overview\" as const,\n      title: \"Overview\",\n      content: (\n        <div className=\"space-y-4\">\n          <h2 className=\"text-4xl font-serif font-bold leading-tight\">\n            Sitting Is The New Smoking: Breaking The Sedentary Cycle\n          </h2>\n          <div className=\"grid grid-cols-3 gap-4 my-6\">\n            <div className=\"text-center p-4 rounded-md bg-muted\">\n              <p className=\"text-4xl font-mono font-bold text-primary\">47%</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Increased mortality risk</p>\n            </div>\n            <div className=\"text-center p-4 rounded-md bg-muted\">\n              <p className=\"text-4xl font-mono font-bold text-primary\">8+</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Hours sitting daily</p>\n            </div>\n            <div className=\"text-center p-4 rounded-md bg-muted\">\n              <p className=\"text-4xl font-mono font-bold text-primary\">30min</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Movement needed</p>\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Source: Journal of Preventive Medicine, 2024 • 12,000 participants\n          </p>\n        </div>\n      ),\n    },\n    {\n      id: \"methods\",\n      type: \"methods\" as const,\n      title: \"Methods\",\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-2xl font-semibold\">Research Methodology</h3>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Study Design</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Longitudinal cohort study over 10 years tracking sedentary behavior\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Participants</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                12,000 office workers aged 25-65 across 8 countries\n              </p>\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      id: \"solution-1\",\n      type: \"solution\" as const,\n      title: \"Solution 1\",\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-2xl font-semibold\">Stand Up Every 30 Minutes</h3>\n          <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n            <li>Set a timer on your phone or computer for every 30 minutes</li>\n            <li>Stand up and stretch for at least 1-2 minutes</li>\n            <li>Walk to get water or use stairs if available</li>\n            <li>Do simple desk exercises like shoulder rolls or leg raises</li>\n          </ol>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4\">\n      <Button onClick={() => setOpen(true)}>Open Viewer</Button>\n      <InfographicViewer\n        open={open}\n        onClose={() => setOpen(false)}\n        sections={sections}\n      />\n    </div>\n  );\n}\n","size_bytes":3276},"client/src/components/TagPill.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TagPillProps {\n  label: string;\n  selected?: boolean;\n  onRemove?: () => void;\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function TagPill({ label, selected, onRemove, onClick, className }: TagPillProps) {\n  return (\n    <Badge\n      variant={selected ? \"default\" : \"outline\"}\n      className={cn(\n        \"rounded-full px-3 py-1 text-xs font-medium uppercase tracking-wide cursor-pointer\",\n        selected && \"bg-primary text-primary-foreground\",\n        className\n      )}\n      onClick={onClick}\n      data-testid={`tag-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {label}\n      {onRemove && (\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onRemove();\n          }}\n          className=\"ml-1 hover:opacity-70\"\n          data-testid={`button-remove-tag-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n        >\n          <X className=\"h-3 w-3\" />\n        </button>\n      )}\n    </Badge>\n  );\n}\n","size_bytes":1089},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle2, Clock, XCircle } from \"lucide-react\";\n\ntype Status = \"approved\" | \"pending\" | \"rejected\";\n\ninterface StatusBadgeProps {\n  status: Status;\n}\n\nexport function StatusBadge({ status }: StatusBadgeProps) {\n  const configs = {\n    approved: {\n      label: \"Approved\",\n      icon: CheckCircle2,\n      className: \"bg-success/10 text-success border-success/20\",\n    },\n    pending: {\n      label: \"Pending\",\n      icon: Clock,\n      className: \"bg-warning/10 text-warning border-warning/20\",\n    },\n    rejected: {\n      label: \"Rejected\",\n      icon: XCircle,\n      className: \"bg-error/10 text-error border-error/20\",\n    },\n  };\n\n  const config = configs[status];\n  const Icon = config.icon;\n\n  return (\n    <Badge variant=\"outline\" className={config.className} data-testid={`badge-status-${status}`}>\n      <Icon className=\"h-3 w-3 mr-1\" />\n      {config.label}\n    </Badge>\n  );\n}\n","size_bytes":947},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/examples/StatusBadge.tsx":{"content":"import { StatusBadge } from \"../StatusBadge\";\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"p-4 flex gap-3\">\n      <StatusBadge status=\"approved\" />\n      <StatusBadge status=\"pending\" />\n      <StatusBadge status=\"rejected\" />\n    </div>\n  );\n}\n","size_bytes":279},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from \"../ThemeToggle\";\nimport { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":268},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ProfileTagManager.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TagPill } from \"./TagPill\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Plus } from \"lucide-react\";\n\ninterface ProfileTagManagerProps {\n  selectedTags: string[];\n  recommendedTags: string[];\n  allTags: string[];\n  onTagToggle: (tag: string) => void;\n}\n\nexport function ProfileTagManager({\n  selectedTags,\n  recommendedTags,\n  allTags,\n  onTagToggle,\n}: ProfileTagManagerProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const filteredTags = allTags.filter(\n    (tag) =>\n      tag.toLowerCase().includes(searchQuery.toLowerCase()) &&\n      !selectedTags.includes(tag)\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Interest Tags</CardTitle>\n          <CardDescription>\n            Customize your feed by selecting topics you're interested in\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {selectedTags.length > 0 ? (\n              selectedTags.map((tag) => (\n                <TagPill\n                  key={tag}\n                  label={tag}\n                  selected\n                  onRemove={() => onTagToggle(tag)}\n                />\n              ))\n            ) : (\n              <p className=\"text-sm text-muted-foreground\">\n                No tags selected yet. Browse recommended or search below.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Recommended Tags</CardTitle>\n          <CardDescription>Based on your reading behavior</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {recommendedTags.map((tag) => (\n              <TagPill\n                key={tag}\n                label={tag}\n                onClick={() => onTagToggle(tag)}\n                className=\"hover-elevate\"\n              />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Browse All Tags</CardTitle>\n          <CardDescription>Search and discover new topics</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search tags...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-tags\"\n            />\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {filteredTags.slice(0, 20).map((tag) => (\n              <TagPill\n                key={tag}\n                label={tag}\n                onClick={() => onTagToggle(tag)}\n                className=\"hover-elevate\"\n              />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3200},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/openai.ts":{"content":"// OpenAI integration - based on blueprint:javascript_openai\nimport OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface InfographicSection {\n  sectionA: {\n    title: string;\n    summary: string;\n    statistics: Array<{ value: string; label: string }>;\n    sources: string[];\n    conclusions: string[];\n  };\n  sectionB: {\n    methodology: string;\n    participants: string;\n    technicalTerms: string[];\n    studyDesign: string;\n  };\n  sectionC: Array<{\n    badge: number;\n    title: string;\n    steps: string[];\n  }>;\n}\n\nexport async function generateInfographicFromText(\n  researchText: string,\n  researcherNotes?: string\n): Promise<InfographicSection> {\n  try {\n    const systemPrompt = `You are an expert research communicator who transforms academic papers into engaging, accessible infographics. \nYour task is to analyze research papers and create structured content following the Venngage research infographic format.\n\nGenerate content for THREE distinct sections:\n\n**Section A - Overview (for general audience):**\n- A thought-provoking, engaging title (not just the paper title)\n- A clear 2-3 sentence summary explaining what the research is about\n- 3-5 key statistics with specific numbers and labels\n- List of academic sources/citations\n- 2-3 main conclusions in simple language\n\n**Section B - Methods (for researchers):**\n- Study methodology explained clearly\n- Number and description of participants\n- List of 3-5 key technical terms used in the research\n- Overall study design approach\n\n**Section C - Solutions (3-5 separate action pages for laypeople):**\nCreate 3-5 distinct \"HERE'S WHAT YOU CAN DO\" solution pages, each with:\n- A numbered badge (1, 2, 3, etc.)\n- An action-oriented title (e.g., \"Take Movement Breaks Every Hour\")\n- 3-5 specific, practical steps anyone can implement\n\nEach solution page should address different aspects of applying the research to daily life.\nThink: \"Sitting is the new smoking\" → Multiple solution pages like \"Desk Exercises\", \"Walking Meetings\", \"Posture Tips\", etc.\n\nRespond ONLY with valid JSON matching this structure - no markdown, no explanations.`;\n\n    const userPrompt = `Analyze this research paper and generate infographic content:\n\n${researchText}\n\n${researcherNotes ? `Additional context from researcher: ${researcherNotes}` : ''}\n\nGenerate structured infographic content in JSON format with sectionA, sectionB, and sectionC as described.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 8192,\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error(\"No content generated from OpenAI\");\n    }\n\n    const result = JSON.parse(content);\n    \n    // Validate the structure\n    if (!result.sectionA || !result.sectionB || !result.sectionC) {\n      throw new Error(\"Invalid infographic structure generated\");\n    }\n\n    // Ensure we have at least 3 solution pages\n    if (!Array.isArray(result.sectionC) || result.sectionC.length < 3) {\n      throw new Error(\"Need at least 3 solution pages in section C\");\n    }\n\n    return result as InfographicSection;\n  } catch (error: any) {\n    throw new Error(\"Failed to generate infographic: \" + error.message);\n  }\n}\n\n// Note: PDF extraction is not implemented in this MVP\n// The UI currently only supports text pasting, which is functional\n// Future enhancement: Add pdf-parse library or OpenAI file API for PDF support\nexport async function extractTextFromPDF(pdfBase64: string): Promise<string> {\n  throw new Error(\"PDF extraction not implemented - please paste text directly\");\n}\n","size_bytes":3952},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/Feed.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { FeedToggle } from \"@/components/FeedToggle\";\nimport { InfographicCard } from \"@/components/InfographicCard\";\nimport { InfographicViewer } from \"@/components/InfographicViewer\";\nimport type { Infographic } from \"@shared/schema\";\n\nexport default function Feed() {\n  const [feedType, setFeedType] = useState<\"for-you\" | \"explore\">(\"for-you\");\n  const [viewerOpen, setViewerOpen] = useState(false);\n  const [selectedInfographic, setSelectedInfographic] = useState<Infographic | null>(null);\n\n  const { data: personalizedInfographics = [] } = useQuery<Infographic[]>({\n    queryKey: [\"/api/infographics/feed/personalized\"],\n    enabled: feedType === \"for-you\",\n    retry: false,\n  });\n\n  const { data: allInfographics = [] } = useQuery<Infographic[]>({\n    queryKey: [\"/api/infographics\"],\n    enabled: feedType === \"explore\",\n  });\n\n  const infographics = feedType === \"for-you\" ? personalizedInfographics : allInfographics;\n\n  const handleCardClick = (infographic: Infographic) => {\n    setSelectedInfographic(infographic);\n    setViewerOpen(true);\n  };\n\n  const handleClose = () => {\n    setViewerOpen(false);\n    setSelectedInfographic(null);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8 flex items-center justify-between flex-wrap gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-serif font-bold mb-2\">Discover Research</h1>\n          <p className=\"text-muted-foreground\">\n            Explore bite-sized research insights tailored for you\n          </p>\n        </div>\n\n        <FeedToggle\n          feedType={feedType}\n          onToggle={setFeedType}\n        />\n      </div>\n\n      {infographics.length === 0 ? (\n        <div className=\"text-center py-16\">\n          <p className=\"text-muted-foreground\">\n            {feedType === \"for-you\" \n              ? \"No personalized content yet. Select some tags in your profile to get started!\"\n              : \"No infographics available yet. Check back soon!\"}\n          </p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {infographics.map((infographic) => (\n            <InfographicCard\n              key={infographic.id}\n              title={(infographic.sectionA as any)?.title || 'Untitled'}\n              coverImage=\"\"\n              tags={[]}\n              researcher={{\n                name: 'Researcher',\n                avatar: '',\n                verified: true,\n              }}\n              date={new Date(infographic.createdAt || '').toLocaleDateString()}\n              onClick={() => handleCardClick(infographic)}\n            />\n          ))}\n        </div>\n      )}\n\n      {selectedInfographic && (\n        <InfographicViewer\n          open={viewerOpen}\n          onClose={handleClose}\n          sections={[\n            {\n              id: \"overview\",\n              type: \"overview\",\n              title: \"Overview\",\n              content: (\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-4xl font-serif font-bold leading-tight\">\n                    {(selectedInfographic.sectionA as any)?.title || 'Untitled'}\n                  </h2>\n                  <p className=\"text-base leading-relaxed text-muted-foreground\">\n                    {(selectedInfographic.sectionA as any)?.summary}\n                  </p>\n                  <div className=\"grid grid-cols-3 gap-4 my-6\">\n                    {(selectedInfographic.sectionA as any)?.statistics?.map((stat: any, idx: number) => (\n                      <div key={idx} className=\"text-center p-4 rounded-md bg-muted\">\n                        <p className=\"text-3xl font-mono font-bold text-primary\">{stat.value}</p>\n                        <p className=\"text-sm text-muted-foreground mt-2\">{stat.label}</p>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"pt-4 border-t\">\n                    <p className=\"text-sm font-medium mb-2\">Sources:</p>\n                    <ul className=\"text-xs text-muted-foreground space-y-1\">\n                      {(selectedInfographic.sectionA as any)?.sources?.map((source: string, idx: number) => (\n                        <li key={idx}>• {source}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ),\n            },\n            {\n              id: \"methods\",\n              type: \"methods\",\n              title: \"Research Methods\",\n              content: (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-2xl font-semibold\">Methodology</h3>\n                  <p className=\"text-muted-foreground\">{(selectedInfographic.sectionB as any)?.methodology}</p>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">Participants:</h4>\n                    <p className=\"text-sm text-muted-foreground\">{(selectedInfographic.sectionB as any)?.participants}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">Study Design:</h4>\n                    <p className=\"text-sm text-muted-foreground\">{(selectedInfographic.sectionB as any)?.studyDesign}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">Technical Terms:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {(selectedInfographic.sectionB as any)?.technicalTerms?.map((term: string, idx: number) => (\n                        <span key={idx} className=\"px-3 py-1 bg-muted rounded-full text-sm\">{term}</span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ),\n            },\n            ...((selectedInfographic.sectionC as any[]) || []).map((solution: any, idx: number) => ({\n              id: `solution-${idx}`,\n              type: \"solution\" as const,\n              title: solution.title,\n              badge: solution.badge,\n              content: (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-10 w-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                      {solution.badge}\n                    </div>\n                    <h3 className=\"text-2xl font-semibold\">{solution.title}</h3>\n                  </div>\n                  \n                  <ul className=\"space-y-3\">\n                    {solution.steps?.map((step: string, stepIdx: number) => (\n                      <li key={stepIdx} className=\"flex gap-3\">\n                        <span className=\"text-primary font-bold\">•</span>\n                        <p className=\"text-muted-foreground\">{step}</p>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              ),\n            })),\n          ]}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7118},"client/src/components/VerificationQueue.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { TagPill } from \"./TagPill\";\nimport { CheckCircle2, XCircle, Eye } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface SubmissionItem {\n  id: string;\n  title: string;\n  researcher: {\n    name: string;\n    avatar?: string;\n  };\n  tags: string[];\n  status: \"approved\" | \"pending\" | \"rejected\";\n  submittedDate: string;\n  coverImage: string;\n}\n\ninterface VerificationQueueProps {\n  submissions: SubmissionItem[];\n  onApprove: (id: string) => void;\n  onReject: (id: string) => void;\n  onView: (id: string) => void;\n}\n\nexport function VerificationQueue({\n  submissions,\n  onApprove,\n  onReject,\n  onView,\n}: VerificationQueueProps) {\n  return (\n    <div className=\"space-y-4\">\n      {submissions.map((submission) => (\n        <Card key={submission.id} className=\"overflow-hidden\" data-testid={`submission-${submission.id}`}>\n          <div className=\"flex flex-col md:flex-row\">\n            <div className=\"md:w-48 aspect-[3/4] md:aspect-auto overflow-hidden\">\n              <img\n                src={submission.coverImage}\n                alt={submission.title}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n            <div className=\"flex-1\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-serif font-semibold mb-2\">\n                      {submission.title}\n                    </h3>\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Avatar className=\"h-6 w-6\">\n                        <AvatarImage src={submission.researcher.avatar} />\n                        <AvatarFallback>{submission.researcher.name[0]}</AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {submission.researcher.name}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        • {submission.submittedDate}\n                      </span>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {submission.tags.map((tag) => (\n                        <TagPill key={tag} label={tag} />\n                      ))}\n                    </div>\n                  </div>\n                  <StatusBadge status={submission.status} />\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"flex gap-2 flex-wrap\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onView(submission.id)}\n                    data-testid={`button-view-${submission.id}`}\n                  >\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    View Details\n                  </Button>\n                  {submission.status === \"pending\" && (\n                    <>\n                      <Button\n                        variant=\"default\"\n                        size=\"sm\"\n                        onClick={() => onApprove(submission.id)}\n                        className=\"bg-success hover:bg-success/90\"\n                        data-testid={`button-approve-${submission.id}`}\n                      >\n                        <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                        Approve\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onReject(submission.id)}\n                        className=\"text-destructive border-destructive/20 hover:bg-destructive/10\"\n                        data-testid={`button-reject-${submission.id}`}\n                      >\n                        <XCircle className=\"h-4 w-4 mr-2\" />\n                        Reject\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4399},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":495},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Brain, Shield, Zap } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6\">\n            Research Made Accessible\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Transform complex academic research into bite-sized, actionable insights.\n            Discover, understand, and implement research findings in your daily life.\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-login\"\n            >\n              Get Started <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 bg-muted/50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">\n            How It Works\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center p-6\">\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Brain className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">For Researchers</h3>\n              <p className=\"text-muted-foreground\">\n                Upload your research and let AI transform it into engaging,\n                accessible infographics with actionable insights.\n              </p>\n            </div>\n\n            <div className=\"text-center p-6\">\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Verified Content</h3>\n              <p className=\"text-muted-foreground\">\n                Every infographic is reviewed by our team to ensure accuracy\n                and credibility before publication.\n              </p>\n            </div>\n\n            <div className=\"text-center p-6\">\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Zap className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Personalized Feed</h3>\n              <p className=\"text-muted-foreground\">\n                Discover research tailored to your interests with\n                Instagram-style browsing and smart recommendations.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-6\">\n            Ready to explore research differently?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Join our community of researchers and curious minds\n          </p>\n          <Button\n            size=\"lg\"\n            onClick={() => window.location.href = \"/api/login\"}\n            data-testid=\"button-cta-login\"\n          >\n            Sign In to Continue\n          </Button>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":3676},"client/src/pages/Home.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowRight, Microscope, Users, Shield } from \"lucide-react\";\nimport heroImage from \"@assets/stock_images/modern_research_labo_38189ff4.jpg\";\n\nexport default function Home() {\n  return (\n    <div>\n      <section className=\"relative h-[60vh] flex items-center justify-center overflow-hidden\">\n        <img\n          src={heroImage}\n          alt=\"Research Laboratory\"\n          className=\"absolute inset-0 w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-black/20\" />\n        <div className=\"relative z-10 text-center px-4 max-w-4xl\">\n          <h1 className=\"text-5xl md:text-6xl font-serif font-bold text-white mb-6 leading-tight\">\n            Transform Research Into Action\n          </h1>\n          <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n            Discover bite-sized research insights transformed into visual infographics.\n            Researchers share findings, laypeople gain actionable knowledge.\n          </p>\n          <div className=\"flex gap-4 justify-center flex-wrap\">\n            <Button\n              size=\"lg\"\n              className=\"bg-primary border border-primary-border text-primary-foreground backdrop-blur-sm\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"backdrop-blur-md bg-white/10 border-white/30 text-white hover:bg-white/20\"\n              data-testid=\"button-learn-more\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-serif font-bold mb-4\">How It Works</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Bridging the gap between academic research and everyday life\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            <Card className=\"text-center hover-elevate transition-all\">\n              <CardContent className=\"pt-8 pb-8\">\n                <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-6\">\n                  <Microscope className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3\">Researchers Upload</h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Scientists and researchers upload their papers. AI extracts key findings\n                  and generates structured infographics with actionable insights.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover-elevate transition-all\">\n              <CardContent className=\"pt-8 pb-8\">\n                <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-6\">\n                  <Shield className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3\">Admin Verification</h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Administrators verify credibility, categorize with custom tags, and\n                  ensure quality before content reaches the community.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover-elevate transition-all\">\n              <CardContent className=\"pt-8 pb-8\">\n                <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-6\">\n                  <Users className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3\">Users Discover</h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  Personalized feeds show relevant research. Swipe through infographics\n                  to learn statistics, methods, and practical solutions.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-serif font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of curious minds transforming research into real-world action\n          </p>\n          <Button size=\"lg\" data-testid=\"button-join-now\">\n            Join ResearchBite\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Button>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5137},"client/src/components/examples/ProfileTagManager.tsx":{"content":"import { useState } from \"react\";\nimport { ProfileTagManager } from \"../ProfileTagManager\";\n\nexport default function ProfileTagManagerExample() {\n  const [selectedTags, setSelectedTags] = useState([\"Health\", \"Psychology\"]);\n\n  const recommendedTags = [\"Technology\", \"Environment\", \"Neuroscience\"];\n  const allTags = [\n    \"Health\",\n    \"Psychology\",\n    \"Technology\",\n    \"Environment\",\n    \"Neuroscience\",\n    \"Biology\",\n    \"Climate\",\n    \"Education\",\n    \"Nutrition\",\n    \"Exercise\",\n  ];\n\n  const handleTagToggle = (tag: string) => {\n    setSelectedTags((prev) =>\n      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]\n    );\n  };\n\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <ProfileTagManager\n        selectedTags={selectedTags}\n        recommendedTags={recommendedTags}\n        allTags={allTags}\n        onTagToggle={handleTagToggle}\n      />\n    </div>\n  );\n}\n","size_bytes":896},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ResearcherUpload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, FileText, Loader2, CheckCircle2 } from \"lucide-react\";\nimport type { Tag } from \"@shared/schema\";\n\nexport function ResearcherUpload() {\n  const [researchText, setResearchText] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [step, setStep] = useState<\"upload\" | \"questionnaire\">(\"upload\");\n  const [formData, setFormData] = useState({\n    targetAudience: \"\",\n    applicationAreas: \"\",\n    practicalConstraints: \"\",\n    additionalInsights: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tags = [] } = useQuery<Tag[]>({\n    queryKey: [\"/api/tags\"],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"/api/infographics\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Your research has been submitted for review.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/researcher/infographics\"] });\n      \n      // Reset form\n      setResearchText(\"\");\n      setSelectedTags([]);\n      setFormData({\n        targetAudience: \"\",\n        applicationAreas: \"\",\n        practicalConstraints: \"\",\n        additionalInsights: \"\",\n      });\n      setStep(\"upload\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload research. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleContinue = () => {\n    if (!researchText.trim()) {\n      toast({\n        title: \"Missing text\",\n        description: \"Please paste your research text to continue.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setStep(\"questionnaire\");\n  };\n\n  const handleSubmit = () => {\n    const researcherNotes = `\nTarget Audience: ${formData.targetAudience}\nApplication Areas: ${formData.applicationAreas}\nPractical Constraints: ${formData.practicalConstraints}\nAdditional Insights: ${formData.additionalInsights}\n    `.trim();\n\n    uploadMutation.mutate({\n      researchText,\n      researcherNotes: researcherNotes || undefined,\n      tagIds: selectedTags,\n    });\n  };\n\n  const toggleTag = (tagId: string) => {\n    setSelectedTags(prev =>\n      prev.includes(tagId) ? prev.filter(id => id !== tagId) : [...prev, tagId]\n    );\n  };\n\n  if (step === \"questionnaire\") {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Help Us Generate Better Solutions</CardTitle>\n          <CardDescription>\n            Answer a few questions to help us create actionable insights for your audience\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"target-audience\">Target Audience</Label>\n            <Input\n              id=\"target-audience\"\n              placeholder=\"e.g., Office workers, Students, Athletes\"\n              value={formData.targetAudience}\n              onChange={(e) => setFormData(prev => ({ ...prev, targetAudience: e.target.value }))}\n              data-testid=\"input-target-audience\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"application-areas\">Application Areas</Label>\n            <Textarea\n              id=\"application-areas\"\n              placeholder=\"Where can people apply this research in their daily lives?\"\n              value={formData.applicationAreas}\n              onChange={(e) => setFormData(prev => ({ ...prev, applicationAreas: e.target.value }))}\n              data-testid=\"textarea-application-areas\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"practical-constraints\">Practical Constraints</Label>\n            <Textarea\n              id=\"practical-constraints\"\n              placeholder=\"Any limitations or considerations people should know?\"\n              value={formData.practicalConstraints}\n              onChange={(e) => setFormData(prev => ({ ...prev, practicalConstraints: e.target.value }))}\n              data-testid=\"textarea-constraints\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"additional-insights\">Additional Insights (Optional)</Label>\n            <Textarea\n              id=\"additional-insights\"\n              placeholder=\"Any other context that would help generate better solutions?\"\n              value={formData.additionalInsights}\n              onChange={(e) => setFormData(prev => ({ ...prev, additionalInsights: e.target.value }))}\n              data-testid=\"textarea-insights\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Select Tags (Optional)</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {tags.map(tag => (\n                <Badge\n                  key={tag.id}\n                  variant={selectedTags.includes(tag.id) ? \"default\" : \"outline\"}\n                  className=\"cursor-pointer\"\n                  onClick={() => toggleTag(tag.id)}\n                  data-testid={`tag-${tag.id}`}\n                >\n                  {selectedTags.includes(tag.id) && <CheckCircle2 className=\"h-3 w-3 mr-1\" />}\n                  {tag.name}\n                </Badge>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button \n              onClick={() => setStep(\"upload\")} \n              variant=\"outline\" \n              disabled={uploadMutation.isPending}\n              data-testid=\"button-back\"\n            >\n              Back\n            </Button>\n            <Button \n              onClick={handleSubmit} \n              className=\"flex-1\" \n              disabled={uploadMutation.isPending}\n              data-testid=\"button-generate\"\n            >\n              {uploadMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                \"Generate Infographics\"\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Upload Research</CardTitle>\n        <CardDescription>\n          Paste your research paper text to generate infographics\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"research-text\">Research Paper Text</Label>\n          <Textarea\n            id=\"research-text\"\n            placeholder=\"Paste the full text of your research paper here...\"\n            value={researchText}\n            onChange={(e) => setResearchText(e.target.value)}\n            rows={12}\n            className=\"font-mono text-sm\"\n            data-testid=\"textarea-research\"\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Paste the complete research paper including abstract, methodology, results, and conclusions\n          </p>\n        </div>\n\n        <Button\n          onClick={handleContinue}\n          disabled={!researchText.trim()}\n          className=\"w-full\"\n          data-testid=\"button-continue\"\n        >\n          Continue to Questionnaire\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8432},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 99%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 220 9% 90%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 220 9% 93%;\n\n  --sidebar: 220 9% 96%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 220 9% 89%;\n\n  --sidebar-primary: 210 100% 56%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 9% 92%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 210 100% 56%;\n\n  --popover: 0 0% 97%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 220 9% 88%;\n\n  --primary: 210 100% 56%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 9% 88%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 220 9% 91%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 12% 94%;\n\n  --accent-foreground: 220 13% 18%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 75%;\n  --ring: 210 100% 56%;\n  --chart-1: 210 100% 56%;\n  --chart-2: 160 84% 39%;\n  --chart-3: 200 98% 39%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 142 76% 36%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Playfair Display, Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 18% / 0.08), 0px 2px 4px -2px hsl(220 13% 18% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 18% / 0.10), 0px 3px 6px -3px hsl(220 13% 18% / 0.08);\n  --shadow-lg: 0px 12px 24px -4px hsl(220 13% 18% / 0.12), 0px 6px 12px -6px hsl(220 13% 18% / 0.08);\n  --shadow-xl: 0px 20px 40px -8px hsl(220 13% 18% / 0.15), 0px 10px 20px -10px hsl(220 13% 18% / 0.10);\n  --shadow-2xl: 0px 32px 64px -12px hsl(220 13% 18% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 10%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 13% 22%;\n\n  --card: 220 13% 14%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 13% 18%;\n\n  --sidebar: 220 13% 12%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 13% 16%;\n\n  --sidebar-primary: 210 100% 62%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 13% 16%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 210 100% 62%;\n\n  --popover: 220 13% 16%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 13% 20%;\n\n  --primary: 210 100% 62%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 13% 20%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 13% 18%;\n\n  --muted-foreground: 220 9% 64%;\n\n  --accent: 220 15% 19%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 35%;\n  --ring: 210 100% 62%;\n  --chart-1: 210 100% 62%;\n  --chart-2: 160 84% 45%;\n  --chart-3: 200 98% 45%;\n  --chart-4: 38 92% 55%;\n  --chart-5: 142 76% 42%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.25), 0px 2px 4px -2px hsl(0 0% 0% / 0.22);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.28), 0px 3px 6px -3px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 12px 24px -4px hsl(0 0% 0% / 0.32), 0px 6px 12px -6px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 40px -8px hsl(0 0% 0% / 0.38), 0px 10px 20px -10px hsl(0 0% 0% / 0.28);\n  --shadow-2xl: 0px 32px 64px -12px hsl(0 0% 0% / 0.45);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11382},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  primaryKey,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles: customer (layperson), researcher, admin\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\", { length: 20 }).notNull().default('customer'), // customer, researcher, admin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Admin-created tags for categorization\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\nexport const insertTagSchema = createInsertSchema(tags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type Tag = typeof tags.$inferSelect;\n\n// Infographics with multi-section structure\n// Section A: Overview (title, sources, statistics, conclusions)\n// Section B: Methods (methodology, participants, technical details)\n// Section C: Solutions (3-5 pages of actionable steps for laypeople)\nexport const infographics = pgTable(\"infographics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  researcherId: varchar(\"researcher_id\").notNull().references(() => users.id),\n  status: varchar(\"status\", { length: 20 }).notNull().default('pending'), // pending, approved, rejected\n  \n  // Infographic content sections (stored as JSON)\n  sectionA: jsonb(\"section_a\").notNull(), // { title, summary, statistics, sources, conclusions }\n  sectionB: jsonb(\"section_b\").notNull(), // { methodology, participants, technicalTerms, studyDesign }\n  sectionC: jsonb(\"section_c\").notNull(), // Array of solution pages: [{ title, steps, badge }]\n  \n  // Metadata\n  originalPaperText: text(\"original_paper_text\"), // Store for reference\n  researcherNotes: text(\"researcher_notes\"), // Context from questionnaire\n  \n  // Admin review\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertInfographicSchema = createInsertSchema(infographics).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  reviewedAt: true,\n});\n\nexport type InsertInfographic = z.infer<typeof insertInfographicSchema>;\nexport type Infographic = typeof infographics.$inferSelect;\n\n// Many-to-many: infographics to tags\nexport const infographicTags = pgTable(\n  \"infographic_tags\",\n  {\n    infographicId: varchar(\"infographic_id\").notNull().references(() => infographics.id, { onDelete: 'cascade' }),\n    tagId: varchar(\"tag_id\").notNull().references(() => tags.id, { onDelete: 'cascade' }),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.infographicId, table.tagId] }),\n  })\n);\n\nexport const insertInfographicTagSchema = createInsertSchema(infographicTags);\nexport type InsertInfographicTag = z.infer<typeof insertInfographicTagSchema>;\nexport type InfographicTag = typeof infographicTags.$inferSelect;\n\n// User preferences for personalized feed\nexport const userTagPreferences = pgTable(\n  \"user_tag_preferences\",\n  {\n    userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n    tagId: varchar(\"tag_id\").notNull().references(() => tags.id, { onDelete: 'cascade' }),\n    addedAt: timestamp(\"added_at\").defaultNow(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.userId, table.tagId] }),\n  })\n);\n\nexport const insertUserTagPreferenceSchema = createInsertSchema(userTagPreferences).omit({\n  addedAt: true,\n});\n\nexport type InsertUserTagPreference = z.infer<typeof insertUserTagPreferenceSchema>;\nexport type UserTagPreference = typeof userTagPreferences.$inferSelect;\n","size_bytes":4838},"client/src/components/FeedToggle.tsx":{"content":"import { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface FeedToggleProps {\n  value: \"for-you\" | \"explore\";\n  onChange: (value: \"for-you\" | \"explore\") => void;\n}\n\nexport function FeedToggle({ value, onChange }: FeedToggleProps) {\n  return (\n    <Tabs value={value} onValueChange={(v) => onChange(v as \"for-you\" | \"explore\")}>\n      <TabsList className=\"w-full md:w-auto\" data-testid=\"tabs-feed\">\n        <TabsTrigger value=\"for-you\" className=\"flex-1 md:flex-none\" data-testid=\"tab-for-you\">\n          For You\n        </TabsTrigger>\n        <TabsTrigger value=\"explore\" className=\"flex-1 md:flex-none\" data-testid=\"tab-explore\">\n          Explore\n        </TabsTrigger>\n      </TabsList>\n    </Tabs>\n  );\n}\n","size_bytes":728},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/App.tsx":{"content":"import { Switch, Route, Link } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport Feed from \"@/pages/Feed\";\nimport Profile from \"@/pages/Profile\";\nimport Admin from \"@/pages/Admin\";\nimport Researcher from \"@/pages/Researcher\";\nimport About from \"@/pages/About\";\nimport NotFound from \"@/pages/not-found\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home as HomeIcon, LayoutGrid, User, Settings, Upload, Info } from \"lucide-react\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin h-12 w-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/\" component={Landing} />\n        <Route component={Landing} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/feed\" component={Feed} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/researcher\" component={Researcher} />\n      <Route path=\"/about\" component={About} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AuthenticatedApp() {\n  const { user } = useAuth();\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation\n        userRole={(user?.role || 'customer') as 'customer' | 'researcher' | 'admin'}\n        userName={`${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'User'}\n        userAvatar={user?.profileImageUrl || undefined}\n        onSearch={(q) => console.log(\"Search:\", q)}\n      />\n      \n      <div className=\"flex-1 flex\">\n        <aside className=\"hidden md:flex w-20 border-r flex-col items-center py-6 gap-4 sticky top-16 h-[calc(100vh-4rem)]\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-12 w-12\" data-testid=\"nav-home\">\n              <HomeIcon className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <Link href=\"/feed\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-12 w-12\" data-testid=\"nav-feed\">\n              <LayoutGrid className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          {(user?.role === 'researcher' || user?.role === 'admin') && (\n            <Link href=\"/researcher\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-12 w-12\" data-testid=\"nav-researcher\">\n                <Upload className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n          )}\n          <Link href=\"/profile\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-12 w-12\" data-testid=\"nav-profile\">\n              <User className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          {user?.role === 'admin' && (\n            <Link href=\"/admin\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-12 w-12\" data-testid=\"nav-admin\">\n                <Settings className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n          )}\n          <div className=\"mt-auto\">\n            <Link href=\"/about\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-12 w-12\" data-testid=\"nav-about-sidebar\">\n                <Info className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </aside>\n        \n        <main className=\"flex-1\">\n          <Router />\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin h-12 w-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated) {\n    return <AuthenticatedApp />;\n  }\n\n  return <Router />;\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":4926},"client/src/pages/Researcher.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ResearcherUpload } from \"@/components/ResearcherUpload\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, TrendingUp, Eye } from \"lucide-react\";\nimport type { Infographic } from \"@shared/schema\";\n\nexport default function Researcher() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: infographics, isLoading } = useQuery<Infographic[]>({\n    queryKey: [\"/api/researcher/infographics\"],\n    retry: false,\n  });\n\n  // Redirect if not authenticated or not researcher/admin\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || (user && user.role !== 'researcher' && user.role !== 'admin'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need researcher access to view this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, user, toast]);\n\n  const stats = {\n    total: infographics?.length || 0,\n    approved: infographics?.filter(i => i.status === 'approved').length || 0,\n    pending: infographics?.filter(i => i.status === 'pending').length || 0,\n    rejected: infographics?.filter(i => i.status === 'rejected').length || 0,\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-500/10 text-green-700 dark:text-green-400';\n      case 'pending': return 'bg-yellow-500/10 text-yellow-700 dark:text-yellow-400';\n      case 'rejected': return 'bg-red-500/10 text-red-700 dark:text-red-400';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getTimeAgo = (date: Date | null) => {\n    if (!date) return '';\n    const seconds = Math.floor((new Date().getTime() - new Date(date).getTime()) / 1000);\n    if (seconds < 60) return 'just now';\n    if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`;\n    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;\n    return `${Math.floor(seconds / 86400)} days ago`;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-serif font-bold mb-2\">Researcher Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Upload your research and transform it into accessible infographics\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                <FileText className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-total\">{stats.total}</p>\n                <p className=\"text-sm text-muted-foreground\">Total Submissions</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"h-12 w-12 rounded-full bg-green-500/10 flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-approved\">{stats.approved}</p>\n                <p className=\"text-sm text-muted-foreground\">Approved</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"h-12 w-12 rounded-full bg-yellow-500/10 flex items-center justify-center\">\n                <Eye className=\"h-6 w-6 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-pending\">{stats.pending}</p>\n                <p className=\"text-sm text-muted-foreground\">Pending Review</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <ResearcherUpload />\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Submissions</CardTitle>\n            <CardDescription>Track the status of your uploaded research</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : infographics && infographics.length > 0 ? (\n              infographics.slice(0, 5).map((infographic) => (\n                <div key={infographic.id} className=\"p-3 rounded-md border hover-elevate\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-sm\" data-testid={`infographic-title-${infographic.id}`}>\n                      {(infographic.sectionA as any)?.title || 'Untitled'}\n                    </h4>\n                    <span \n                      className={`text-xs px-2 py-1 rounded-full capitalize ${getStatusColor(infographic.status)}`}\n                      data-testid={`infographic-status-${infographic.id}`}\n                    >\n                      {infographic.status}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Submitted {getTimeAgo(infographic.createdAt)}\n                  </p>\n                  {infographic.status === 'rejected' && infographic.rejectionReason && (\n                    <p className=\"text-xs text-red-600 dark:text-red-400 mt-1\">\n                      Reason: {infographic.rejectionReason}\n                    </p>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No submissions yet. Upload your first research paper to get started!\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6528},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"design_guidelines.md":{"content":"# Design Guidelines: Research Infographic Platform\n\n## Design Approach\n**Reference-Based Approach** drawing from Instagram (feed & social interactions), Medium (content discovery & readability), and Behance (visual portfolio presentation). This platform bridges academic rigor with social media engagement, requiring visual appeal to make research accessible while maintaining credibility.\n\n**Core Principle:** Transform complex research into visually engaging, swipeable stories that educate and inspire action.\n\n---\n\n## Color Palette\n\n### Light Mode\n- **Primary Background:** 0 0% 99% (off-white, reduces eye strain)\n- **Surface/Cards:** 0 0% 100% (pure white)\n- **Primary Brand:** 210 100% 56% (trustworthy blue, academic association)\n- **Accent:** 160 84% 39% (credibility green for verified content)\n- **Text Primary:** 220 13% 18% (near-black for readability)\n- **Text Secondary:** 220 9% 46% (muted for metadata)\n\n### Dark Mode\n- **Primary Background:** 220 13% 10% (deep charcoal)\n- **Surface/Cards:** 220 13% 14% (elevated surfaces)\n- **Primary Brand:** 210 100% 62% (brightened for dark mode)\n- **Accent:** 160 84% 45% (adjusted for contrast)\n- **Text Primary:** 0 0% 98% (near-white)\n- **Text Secondary:** 220 9% 64% (muted for metadata)\n\n### Semantic Colors\n- **Success (Approved):** 142 76% 36%\n- **Warning (Pending):** 38 92% 50%\n- **Error (Rejected):** 0 84% 60%\n- **Info Tags:** 200 98% 39%\n\n---\n\n## Typography\n\n### Font Families\n- **Primary (Interface):** Inter (Google Fonts) - clean, modern, excellent readability\n- **Accent (Headlines):** Playfair Display (Google Fonts) - academic gravitas for research titles\n- **Data/Stats:** JetBrains Mono (Google Fonts) - for statistics and numerical data\n\n### Type Scale\n- **Hero Title:** text-5xl md:text-6xl font-serif (Playfair)\n- **Infographic Title:** text-3xl md:text-4xl font-serif leading-tight\n- **Section Headers:** text-2xl font-semibold\n- **Body Text:** text-base leading-relaxed (optimal for long-form reading)\n- **Metadata:** text-sm text-secondary\n- **Tags:** text-xs font-medium uppercase tracking-wide\n\n---\n\n## Layout System\n\n### Spacing Primitives\n**Core units:** 2, 4, 8, 12, 16, 24 (tailwind units)\n- **Micro spacing:** p-2, gap-2 (8px) - tight UI elements\n- **Standard spacing:** p-4, gap-4 (16px) - default component padding\n- **Section spacing:** py-8, py-12 (32px-48px) - between content blocks\n- **Large spacing:** py-16, py-24 (64px-96px) - major section separators\n\n### Grid System\n- **Feed Layout:** Single column on mobile, 2-column grid on md:, 3-column on lg: (Masonry-style for varied infographic heights)\n- **Container:** max-w-7xl mx-auto px-4 (global wrapper)\n- **Reading Width:** max-w-prose (optimal for text-heavy sections)\n\n---\n\n## Component Library\n\n### Navigation\n- **Top Nav:** Fixed header with glass morphism effect (backdrop-blur-lg bg-white/80 dark:bg-slate-900/80)\n- **Role Indicator:** Subtle badge showing user type (Researcher/Customer/Admin)\n- **Search:** Prominent tag-based search bar with autocomplete dropdown\n- **Profile Avatar:** Circular with online status indicator\n\n### Feed Components\n\n#### Infographic Card (Cover)\n- **Structure:** Card with hover lift effect (hover:shadow-2xl transition-all)\n- **Cover Image:** aspect-[3/4] object-cover (portrait orientation like Instagram)\n- **Title Overlay:** Gradient overlay bottom-to-top (from-black/70 to-transparent) with white text\n- **Tag Pills:** Absolute positioned top-right, glass morphism chips\n- **Metadata Footer:** Researcher name, verification badge, date, save/share icons\n\n#### Full Infographic Viewer (Modal/Overlay)\n- **Container:** Full-screen overlay with dark backdrop (bg-black/90)\n- **Navigation:** Swipe gestures + arrow buttons for section navigation\n- **Progress Indicator:** Dot navigation showing current section (a, b, c1, c2, etc.)\n- **Section Cards:** max-w-4xl centered, white cards with shadow-2xl\n- **Close Button:** Top-right with backdrop blur\n\n### Infographic Section Layouts\n\n#### Section (a) - Overview\n- **Layout:** Single column, centered\n- **Title:** Large serif font (text-4xl) with generous line-height\n- **Stats Display:** Grid of 2-3 stat cards with large numbers (text-6xl font-mono) and labels\n- **Sources:** Small text at bottom with citation format\n- **Visual:** Background pattern or subtle gradient\n\n#### Section (b) - Methods (Researcher View)\n- **Layout:** Two-column on desktop (methodology left, participants/data right)\n- **Technical Terms:** Highlighted with tooltip/popover on hover\n- **Participant Count:** Large number display with icon\n- **Visual:** Diagrammatic representation if applicable\n\n#### Section (c) - Solutions (Multiple Pages)\n- **Layout:** Card-based, each solution on separate page\n- **Solution Card:** Icon/illustration at top, title, description, actionable steps (numbered list)\n- **CTA:** \"Try This\" or \"Learn More\" buttons\n- **Visual:** Icons from Heroicons, simple illustrations\n\n### Admin Dashboard\n\n#### Tag Management\n- **Tag Grid:** Sortable, filterable grid of tag chips\n- **Create Tag:** Modal with color picker, icon selector, category assignment\n- **Tag Analytics:** Usage count, trending indicators\n\n#### Verification Queue\n- **Card Layout:** Similar to feed but with admin actions (Approve/Reject/Request Changes)\n- **Detail Panel:** Side-by-side comparison of sections, source verification checklist\n- **Status Indicators:** Color-coded badges (yellow pending, green approved, red rejected)\n\n### User Profile\n\n#### Interest Tags Section\n- **Selected Tags:** Larger, filled chips (bg-primary text-white)\n- **Recommended Tags:** Outlined chips with \"+\" icon (border-2 border-primary)\n- **All Tags:** Search/filter interface with category grouping\n\n#### Feed Toggle\n- **Tabs:** \"For You\" (personalized) and \"Explore\" (outside interests)\n- **Visual Indicator:** Active tab with bottom border animation\n\n---\n\n## Interactions & Animations\n\n### Micro-interactions (Minimal Use)\n- **Card Hover:** Subtle lift (translateY(-4px)) with shadow increase\n- **Tag Selection:** Scale pulse on click (scale-105)\n- **Swipe Indicator:** Fade-in arrow hint on first visit to full viewer\n- **Loading States:** Skeleton screens matching card layouts\n\n### Page Transitions\n- **Feed to Viewer:** Scale-up from card position with fade-in backdrop\n- **Section Navigation:** Horizontal slide with slight fade\n\n---\n\n## Images\n\n### Hero Section (Landing/About Pages)\n- **Large hero image:** Full-width, 60vh height, showcasing diverse researchers and visual research data\n- **Placement:** Top of landing page with overlay text\n- **Style:** Split-screen showing research paper transforming into colorful infographic\n\n### Infographic Covers\n- **Required:** AI-generated or researcher-uploaded cover image for each post\n- **Fallback:** Gradient backgrounds with large typography if no image provided\n- **Aspect Ratio:** Consistent 3:4 portrait for grid uniformity\n\n### Profile Headers\n- **Small cover image:** Subtle pattern or gradient, not prominent\n- **Avatar:** Circular, 120px on profile, 40px in nav\n\n---\n\n## Accessibility\n\n- **Color Contrast:** WCAG AAA for all text (7:1 minimum ratio)\n- **Keyboard Navigation:** Full support for swipe navigation via arrow keys\n- **Screen Readers:** Semantic HTML with ARIA labels for infographic sections\n- **Focus Indicators:** Visible 2px ring with primary color on all interactive elements\n- **Dark Mode:** Automatic based on system preference with manual toggle\n\n---\n\n## Responsive Breakpoints\n\n- **Mobile (base):** Single column feed, full-screen infographic viewer\n- **Tablet (md: 768px):** 2-column feed grid, side panel for profile\n- **Desktop (lg: 1024px):** 3-column masonry feed, split-view admin dashboard\n- **Wide (xl: 1280px):** Maximum content width capped at 1400px\n\n---\n\n**Key Design Philosophy:** Create a platform where academic research feels as engaging as social media, where every swipe reveals actionable insights, and where visual design builds trust in scientific credibility.","size_bytes":7968},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/visually-hidden.tsx":{"content":"import * as React from \"react\"\n\nconst VisuallyHidden = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <span\n      ref={ref}\n      {...props}\n      style={{\n        position: \"absolute\",\n        border: 0,\n        width: 1,\n        height: 1,\n        padding: 0,\n        margin: -1,\n        overflow: \"hidden\",\n        clip: \"rect(0, 0, 0, 0)\",\n        whiteSpace: \"nowrap\",\n        wordWrap: \"normal\",\n      }}\n    >\n      {children}\n    </span>\n  )\n})\n\nVisuallyHidden.displayName = \"VisuallyHidden\"\n\nexport { VisuallyHidden }\n","size_bytes":609},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    return stored || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1128},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/Navigation.tsx":{"content":"import { Search, Bell } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { Link } from \"wouter\";\n\ninterface NavigationProps {\n  userRole: \"researcher\" | \"customer\" | \"admin\";\n  userName: string;\n  userAvatar?: string;\n  onSearch?: (query: string) => void;\n}\n\nexport function Navigation({ userRole, userName, userAvatar, onSearch }: NavigationProps) {\n  const roleColors = {\n    researcher: \"bg-info/10 text-info border-info/20\",\n    customer: \"bg-primary/10 text-primary border-primary/20\",\n    admin: \"bg-warning/10 text-warning border-warning/20\",\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 backdrop-blur-lg bg-background/80 border-b\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16 gap-4\">\n          <div className=\"flex items-center gap-8\">\n            <h1 className=\"text-2xl font-serif font-bold\" data-testid=\"text-logo\">\n              ResearchBite\n            </h1>\n            <nav className=\"hidden lg:flex items-center gap-6\">\n              <Link href=\"/about\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"nav-about\">\n                  About\n                </Button>\n              </Link>\n            </nav>\n            <div className=\"hidden md:flex relative w-80\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by tags...\"\n                className=\"pl-10\"\n                onChange={(e) => onSearch?.(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className={roleColors[userRole]} data-testid=\"badge-user-role\">\n              {userRole.charAt(0).toUpperCase() + userRole.slice(1)}\n            </Badge>\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n              <Bell className=\"h-5 w-5\" />\n            </Button>\n            <ThemeToggle />\n            <Button variant=\"ghost\" className=\"gap-2 px-2\" data-testid=\"button-profile\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={userAvatar} />\n                <AvatarFallback>{userName[0]}</AvatarFallback>\n              </Avatar>\n              <span className=\"hidden md:inline text-sm font-medium\">{userName}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2762},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, requireRole } from \"./replitAuth\";\nimport { generateInfographicFromText } from \"./openai\";\nimport { insertTagSchema, insertInfographicSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // ============= AUTH ROUTES =============\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Update user role (admin only)\n  app.patch('/api/users/:userId/role', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { role } = req.body;\n      \n      if (!['customer', 'researcher', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      const user = await storage.updateUserRole(userId, role);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // ============= TAG ROUTES =============\n  // Get all tags\n  app.get('/api/tags', async (_req, res) => {\n    try {\n      const tags = await storage.getAllTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch tags\" });\n    }\n  });\n\n  // Create tag (admin only)\n  app.post('/api/tags', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const tagData = insertTagSchema.parse({\n        ...req.body,\n        createdBy: req.dbUser.id,\n      });\n      \n      const tag = await storage.createTag(tagData);\n      res.json(tag);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Error creating tag:\", error);\n      res.status(500).json({ message: \"Failed to create tag\" });\n    }\n  });\n\n  // Delete tag (admin only)\n  app.delete('/api/tags/:tagId', isAuthenticated, requireRole('admin'), async (req, res) => {\n    try {\n      await storage.deleteTag(req.params.tagId);\n      res.json({ message: \"Tag deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting tag:\", error);\n      res.status(500).json({ message: \"Failed to delete tag\" });\n    }\n  });\n\n  // ============= INFOGRAPHIC ROUTES =============\n  // Get all approved infographics\n  app.get('/api/infographics', async (_req, res) => {\n    try {\n      const infographics = await storage.getApprovedInfographics();\n      res.json(infographics);\n    } catch (error) {\n      console.error(\"Error fetching infographics:\", error);\n      res.status(500).json({ message: \"Failed to fetch infographics\" });\n    }\n  });\n\n  // Get infographic by ID with tags\n  app.get('/api/infographics/:id', async (req, res) => {\n    try {\n      const infographic = await storage.getInfographicById(req.params.id);\n      if (!infographic) {\n        return res.status(404).json({ message: \"Infographic not found\" });\n      }\n      \n      const tags = await storage.getInfographicTags(req.params.id);\n      res.json({ ...infographic, tags });\n    } catch (error) {\n      console.error(\"Error fetching infographic:\", error);\n      res.status(500).json({ message: \"Failed to fetch infographic\" });\n    }\n  });\n\n  // Get personalized feed\n  app.get('/api/infographics/feed/personalized', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const infographics = await storage.getPersonalizedInfographics(userId);\n      res.json(infographics);\n    } catch (error) {\n      console.error(\"Error fetching personalized feed:\", error);\n      res.status(500).json({ message: \"Failed to fetch personalized feed\" });\n    }\n  });\n\n  // Get infographics by tag IDs\n  app.post('/api/infographics/by-tags', async (req, res) => {\n    try {\n      const { tagIds } = req.body;\n      if (!Array.isArray(tagIds)) {\n        return res.status(400).json({ message: \"tagIds must be an array\" });\n      }\n      \n      const infographics = await storage.getInfographicsByTagIds(tagIds);\n      res.json(infographics);\n    } catch (error) {\n      console.error(\"Error fetching infographics by tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch infographics\" });\n    }\n  });\n\n  // Create infographic (researcher only)\n  app.post('/api/infographics', isAuthenticated, requireRole('researcher', 'admin'), async (req: any, res) => {\n    try {\n      const { researchText, researcherNotes, tagIds } = req.body;\n      \n      if (!researchText) {\n        return res.status(400).json({ message: \"Research text is required\" });\n      }\n\n      // Generate infographic content using AI\n      const sections = await generateInfographicFromText(researchText, researcherNotes);\n      \n      const infographicData = {\n        researcherId: req.dbUser.id,\n        status: 'pending',\n        sectionA: sections.sectionA,\n        sectionB: sections.sectionB,\n        sectionC: sections.sectionC,\n        originalPaperText: researchText,\n        researcherNotes: researcherNotes || null,\n        reviewedBy: null,\n        rejectionReason: null,\n      };\n      \n      const infographic = await storage.createInfographic(infographicData);\n      \n      // Add tags if provided\n      if (Array.isArray(tagIds) && tagIds.length > 0) {\n        await storage.addTagsToInfographic(infographic.id, tagIds);\n      }\n      \n      res.json(infographic);\n    } catch (error: any) {\n      console.error(\"Error creating infographic:\", error);\n      res.status(500).json({ message: error.message || \"Failed to create infographic\" });\n    }\n  });\n\n  // Get researcher's infographics\n  app.get('/api/researcher/infographics', isAuthenticated, requireRole('researcher', 'admin'), async (req: any, res) => {\n    try {\n      const infographics = await storage.getInfographicsByResearcher(req.dbUser.id);\n      res.json(infographics);\n    } catch (error) {\n      console.error(\"Error fetching researcher infographics:\", error);\n      res.status(500).json({ message: \"Failed to fetch infographics\" });\n    }\n  });\n\n  // ============= ADMIN ROUTES =============\n  // Get pending infographics for verification\n  app.get('/api/admin/infographics/pending', isAuthenticated, requireRole('admin'), async (_req, res) => {\n    try {\n      const infographics = await storage.getInfographicsByStatus('pending');\n      res.json(infographics);\n    } catch (error) {\n      console.error(\"Error fetching pending infographics:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending infographics\" });\n    }\n  });\n\n  // Approve/reject infographic\n  app.patch('/api/admin/infographics/:id/review', isAuthenticated, requireRole('admin'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, rejectionReason } = req.body;\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Status must be 'approved' or 'rejected'\" });\n      }\n      \n      if (status === 'rejected' && !rejectionReason) {\n        return res.status(400).json({ message: \"Rejection reason is required\" });\n      }\n      \n      const infographic = await storage.updateInfographicStatus(\n        id,\n        status,\n        req.dbUser.id,\n        rejectionReason\n      );\n      \n      res.json(infographic);\n    } catch (error) {\n      console.error(\"Error reviewing infographic:\", error);\n      res.status(500).json({ message: \"Failed to review infographic\" });\n    }\n  });\n\n  // ============= USER PREFERENCE ROUTES =============\n  // Get user's tag preferences\n  app.get('/api/user/tags', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const tags = await storage.getUserTagPreferences(userId);\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching user tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch user tags\" });\n    }\n  });\n\n  // Add tag preference\n  app.post('/api/user/tags/:tagId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.addUserTagPreference(userId, req.params.tagId);\n      res.json({ message: \"Tag preference added\" });\n    } catch (error) {\n      console.error(\"Error adding tag preference:\", error);\n      res.status(500).json({ message: \"Failed to add tag preference\" });\n    }\n  });\n\n  // Remove tag preference\n  app.delete('/api/user/tags/:tagId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.removeUserTagPreference(userId, req.params.tagId);\n      res.json({ message: \"Tag preference removed\" });\n    } catch (error) {\n      console.error(\"Error removing tag preference:\", error);\n      res.status(500).json({ message: \"Failed to remove tag preference\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9454},"client/src/components/AdminTagManager.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { TagPill } from \"./TagPill\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Tag {\n  id: string;\n  name: string;\n  usageCount: number;\n}\n\ninterface AdminTagManagerProps {\n  tags: Tag[];\n  onCreateTag: (name: string) => void;\n  onDeleteTag: (id: string) => void;\n}\n\nexport function AdminTagManager({ tags, onCreateTag, onDeleteTag }: AdminTagManagerProps) {\n  const [newTagName, setNewTagName] = useState(\"\");\n\n  const handleCreate = () => {\n    if (newTagName.trim()) {\n      onCreateTag(newTagName.trim());\n      setNewTagName(\"\");\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tag Management</CardTitle>\n        <CardDescription>Create and manage research categorization tags</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Input\n            placeholder=\"New tag name...\"\n            value={newTagName}\n            onChange={(e) => setNewTagName(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && handleCreate()}\n            data-testid=\"input-new-tag\"\n          />\n          <Button onClick={handleCreate} data-testid=\"button-create-tag\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create\n          </Button>\n        </div>\n\n        <div className=\"space-y-2\">\n          {tags.map((tag) => (\n            <div\n              key={tag.id}\n              className=\"flex items-center justify-between p-3 rounded-md border hover-elevate\"\n              data-testid={`tag-item-${tag.id}`}\n            >\n              <div className=\"flex items-center gap-3\">\n                <TagPill label={tag.name} />\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {tag.usageCount} uses\n                </Badge>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => onDeleteTag(tag.id)}\n                data-testid={`button-delete-tag-${tag.id}`}\n              >\n                <Trash2 className=\"h-4 w-4 text-destructive\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2464},"client/src/components/examples/AdminTagManager.tsx":{"content":"import { useState } from \"react\";\nimport { AdminTagManager } from \"../AdminTagManager\";\n\nexport default function AdminTagManagerExample() {\n  const [tags, setTags] = useState([\n    { id: \"1\", name: \"Health\", usageCount: 145 },\n    { id: \"2\", name: \"Psychology\", usageCount: 89 },\n    { id: \"3\", name: \"Technology\", usageCount: 203 },\n  ]);\n\n  const handleCreate = (name: string) => {\n    const newTag = {\n      id: Date.now().toString(),\n      name,\n      usageCount: 0,\n    };\n    setTags([...tags, newTag]);\n    console.log(\"Created tag:\", name);\n  };\n\n  const handleDelete = (id: string) => {\n    setTags(tags.filter((t) => t.id !== id));\n    console.log(\"Deleted tag:\", id);\n  };\n\n  return (\n    <div className=\"p-4 max-w-2xl\">\n      <AdminTagManager\n        tags={tags}\n        onCreateTag={handleCreate}\n        onDeleteTag={handleDelete}\n      />\n    </div>\n  );\n}\n","size_bytes":872},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/Profile.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ProfileTagManager } from \"@/components/ProfileTagManager\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LogOut } from \"lucide-react\";\nimport type { Tag } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: userTags = [] } = useQuery<Tag[]>({\n    queryKey: [\"/api/user/tags\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: allTags = [] } = useQuery<Tag[]>({\n    queryKey: [\"/api/tags\"],\n  });\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const addTagMutation = useMutation({\n    mutationFn: async (tagId: string) => {\n      return await apiRequest(`/api/user/tags/${tagId}`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tags\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeTagMutation = useMutation({\n    mutationFn: async (tagId: string) => {\n      return await apiRequest(`/api/user/tags/${tagId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tags\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTagToggle = (tag: string) => {\n    const tagObj = allTags.find(t => t.name === tag);\n    if (!tagObj) return;\n\n    const isSelected = userTags.some(t => t.id === tagObj.id);\n    if (isSelected) {\n      removeTagMutation.mutate(tagObj.id);\n    } else {\n      addTagMutation.mutate(tagObj.id);\n    }\n  };\n\n  const selectedTags = userTags.map(t => t.name);\n  const selectedTagIds = userTags.map(t => t.id);\n  const recommendedTags = allTags\n    .filter(t => !selectedTagIds.includes(t.id))\n    .slice(0, 5)\n    .map(t => t.name);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarImage src={user?.profileImageUrl || ''} />\n                <AvatarFallback>\n                  {user?.firstName?.[0]}{user?.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h2 className=\"text-2xl font-serif font-bold\">\n                  {user?.firstName} {user?.lastName}\n                </h2>\n                <p className=\"text-muted-foreground capitalize\">{user?.role || 'Customer'}</p>\n              </div>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = \"/api/logout\"}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Log Out\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 rounded-md bg-muted\">\n              <p className=\"text-2xl font-bold\" data-testid=\"stat-tags\">{selectedTags.length}</p>\n              <p className=\"text-sm text-muted-foreground\">Topics Following</p>\n            </div>\n            <div className=\"text-center p-4 rounded-md bg-muted\">\n              <p className=\"text-2xl font-bold\">{user?.email || 'N/A'}</p>\n              <p className=\"text-sm text-muted-foreground\">Email</p>\n            </div>\n            <div className=\"text-center p-4 rounded-md bg-muted\">\n              <p className=\"text-2xl font-bold\">{user?.id?.slice(0, 8) || 'N/A'}</p>\n              <p className=\"text-sm text-muted-foreground\">User ID</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <ProfileTagManager\n        selectedTags={selectedTags}\n        recommendedTags={recommendedTags}\n        allTags={allTags.map(t => t.name)}\n        onTagToggle={handleTagToggle}\n      />\n    </div>\n  );\n}\n","size_bytes":5196},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/About.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileCode, Database, Cpu, GitBranch, Layers, ArrowRight } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-serif font-bold mb-4\">About ResearchBite</h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Technical documentation for the research infographic platform\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Layers className=\"h-5 w-5\" />\n              Tech Stack\n            </CardTitle>\n            <CardDescription>Modern full-stack architecture for research content delivery</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold mb-3 text-sm\">Frontend</h4>\n                <ul className=\"text-sm space-y-2 text-muted-foreground\">\n                  <li><strong>React + TypeScript</strong> - Type-safe UI components</li>\n                  <li><strong>Wouter</strong> - Lightweight client-side routing</li>\n                  <li><strong>TanStack Query</strong> - Server state management & caching</li>\n                  <li><strong>Tailwind CSS + Shadcn/ui</strong> - Design system & styling</li>\n                  <li><strong>Vite</strong> - Fast build tooling & hot reload</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-3 text-sm\">Backend</h4>\n                <ul className=\"text-sm space-y-2 text-muted-foreground\">\n                  <li><strong>Node.js + Express</strong> - API server & routing</li>\n                  <li><strong>PostgreSQL (Neon)</strong> - Relational database</li>\n                  <li><strong>Drizzle ORM</strong> - Type-safe database queries</li>\n                  <li><strong>OpenAI API</strong> - AI-powered infographic generation</li>\n                  <li><strong>Zod</strong> - Runtime validation & type safety</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileCode className=\"h-5 w-5\" />\n              File Structure\n            </CardTitle>\n            <CardDescription>Key files and their responsibilities</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Core Application Files</h4>\n                <div className=\"grid gap-2 text-sm\">\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/App.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Main app layout with routing and navigation</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">shared/schema.ts</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Database schema & TypeScript types (users, infographics, tags)</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">server/routes.ts</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">API endpoints for CRUD operations</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">server/storage.ts</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Database interface & operations</p>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Page Components</h4>\n                <div className=\"grid gap-2 text-sm\">\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/pages/Feed.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Instagram-style feed with infographic cards</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/pages/Researcher.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Research paper upload & AI conversion interface</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/pages/Admin.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Verification queue & tag management dashboard</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/pages/Profile.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">User preferences & personalized tag selection</p>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Key Components</h4>\n                <div className=\"grid gap-2 text-sm\">\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/components/InfographicViewer.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Swipeable viewer with 3 section types (overview, methods, solutions)</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/components/InfographicCard.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Feed card with cover image & metadata</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/components/ResearcherUpload.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">File upload form with tag selection</p>\n                  </div>\n                  <div className=\"p-3 rounded-md bg-muted\">\n                    <code className=\"font-mono text-xs\">client/src/components/VerificationQueue.tsx</code>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Admin approval/rejection interface</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <GitBranch className=\"h-5 w-5\" />\n              Content Pipeline\n            </CardTitle>\n            <CardDescription>How research flows from upload to user consumption</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-lg font-bold text-primary\">1</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Researcher Upload</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Researcher uploads PDF/text research paper → Selects relevant tags → Submits for processing\n                  </p>\n                  <code className=\"text-xs bg-muted px-2 py-1 rounded mt-2 inline-block\">\n                    POST /api/infographics (status: \"pending\")\n                  </code>\n                </div>\n              </div>\n\n              <div className=\"ml-6 border-l-2 border-dashed border-muted-foreground/20 pl-10 py-2\">\n                <ArrowRight className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-lg font-bold text-primary\">2</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Admin Verification</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Admin reviews submission in verification queue → Checks credibility & sources → Approves or rejects\n                  </p>\n                  <code className=\"text-xs bg-muted px-2 py-1 rounded mt-2 inline-block\">\n                    PATCH /api/infographics/:id (status: \"approved\" | \"rejected\")\n                  </code>\n                </div>\n              </div>\n\n              <div className=\"ml-6 border-l-2 border-dashed border-muted-foreground/20 pl-10 py-2\">\n                <ArrowRight className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-lg font-bold text-primary\">3</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">User Discovery</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Approved infographics appear in personalized feeds → Users click to expand → Swipe through sections\n                  </p>\n                  <code className=\"text-xs bg-muted px-2 py-1 rounded mt-2 inline-block\">\n                    GET /api/infographics?status=approved&tags=Health,Psychology\n                  </code>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Cpu className=\"h-5 w-5\" />\n              AI Infographic Generation Pipeline\n            </CardTitle>\n            <CardDescription>Step-by-step process for transforming research papers into infographics</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">01</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Document Parsing</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Extract text content from uploaded PDF/document using text extraction libraries\n                  </p>\n                  <code className=\"text-xs bg-muted px-2 py-1 rounded block\">\n                    Input: research_paper.pdf → Output: raw_text_content\n                  </code>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">02</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">AI Analysis (OpenAI)</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Send research text to OpenAI GPT-4 with structured prompt requesting extraction of:\n                  </p>\n                  <ul className=\"text-xs text-muted-foreground space-y-1 ml-4\">\n                    <li>• Title & key statistics (3-5 impactful numbers)</li>\n                    <li>• Research methodology & technical details</li>\n                    <li>• Practical solutions (3-5 actionable steps for laypeople)</li>\n                    <li>• Sources & citations</li>\n                  </ul>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">03</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Section A: Overview Generation</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Create visually engaging overview section with:\n                  </p>\n                  <div className=\"text-xs bg-muted p-3 rounded space-y-1\">\n                    <p>• Large serif title (attention-grabbing headline)</p>\n                    <p>• 3-4 key statistics in highlighted cards</p>\n                    <p>• Brief summary paragraph for context</p>\n                    <p>• Source attribution & research conclusion</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">04</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Section B: Methods & Technical Details</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Format methodology for researchers and technical readers:\n                  </p>\n                  <div className=\"text-xs bg-muted p-3 rounded space-y-1\">\n                    <p>• Study design & participant information</p>\n                    <p>• Key metrics measured & data collection methods</p>\n                    <p>• Technical terminology with definitions</p>\n                    <p>• Statistical approaches & confidence intervals</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">05</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Section C: Solution Pages (3-5 Pages)</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Transform findings into actionable steps for laypeople - inspired by Venngage research infographics:\n                  </p>\n                  <div className=\"text-xs bg-muted p-3 rounded space-y-2\">\n                    <p className=\"font-semibold\">Each solution page contains:</p>\n                    <p>• Numbered badge (1, 2, 3, etc.) for visual hierarchy</p>\n                    <p>• Clear action-oriented title (e.g., \"Stand Up Every 30 Minutes\")</p>\n                    <p>• Brief explanation of why this solution works</p>\n                    <p>• Step-by-step implementation guide (numbered list)</p>\n                    <p>• Practical, concrete actions anyone can take today</p>\n                  </div>\n                  <div className=\"mt-3 p-3 bg-primary/5 rounded border border-primary/20\">\n                    <p className=\"text-xs font-semibold mb-1\">Example: \"As We Age, Feeling Connected\" style</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Solution 1: \"Join a Group\" → Join a group (step 1), Get a pet (step 2), \n                      Teach someone something (step 3), etc. Each with visual icon and brief description.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">06</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Data Storage & Cover Image</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Store structured infographic data in PostgreSQL:\n                  </p>\n                  <code className=\"text-xs bg-muted px-2 py-1 rounded block\">\n                    sections: JSON[] (overview, methods, solution1, solution2, solution3...)\n                  </code>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Generate or select cover image for feed display\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"font-mono text-sm font-bold text-primary\">07</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold mb-1\">Frontend Rendering</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    InfographicViewer component displays sections as swipeable cards:\n                  </p>\n                  <div className=\"text-xs bg-muted p-3 rounded\">\n                    <p>• Instagram-style viewer with left/right navigation</p>\n                    <p>• Dots indicator shows progress through sections</p>\n                    <p>• Each section type has custom layout & styling</p>\n                    <p>• Mobile-optimized with swipe gestures</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"h-5 w-5\" />\n              Infographic Section Types\n            </CardTitle>\n            <CardDescription>Three core section types based on Venngage research infographic best practices</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 rounded-md bg-muted\">\n                <h4 className=\"font-semibold mb-2 text-sm\">Type A: Overview Section</h4>\n                <p className=\"text-xs text-muted-foreground mb-2\">\n                  High-impact introduction with title, statistics, and context\n                </p>\n                <div className=\"text-xs space-y-1\">\n                  <p>✓ Large title with compelling headline</p>\n                  <p>✓ 3-4 key statistics in visual cards</p>\n                  <p>✓ Summary paragraph for layperson understanding</p>\n                  <p>✓ Source attribution footer</p>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-md bg-muted\">\n                <h4 className=\"font-semibold mb-2 text-sm\">Type B: Methods Section</h4>\n                <p className=\"text-xs text-muted-foreground mb-2\">\n                  Technical details for researchers and interested readers\n                </p>\n                <div className=\"text-xs space-y-1\">\n                  <p>✓ Study design & methodology grid</p>\n                  <p>✓ Participant demographics</p>\n                  <p>✓ Key metrics & measurements</p>\n                  <p>✓ Technical terminology glossary</p>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-md bg-muted\">\n                <h4 className=\"font-semibold mb-2 text-sm\">Type C: Solution Pages (Multiple)</h4>\n                <p className=\"text-xs text-muted-foreground mb-2\">\n                  \"Here's what you can do\" actionable steps - 3-5 separate solution pages\n                </p>\n                <div className=\"text-xs space-y-1\">\n                  <p>✓ Each solution gets its own page/card</p>\n                  <p>✓ Numbered visual badge for each solution</p>\n                  <p>✓ Action-oriented title (verb-based)</p>\n                  <p>✓ Step-by-step implementation guide</p>\n                  <p>✓ Practical, immediately applicable actions</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21195},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/examples/TagPill.tsx":{"content":"import { TagPill } from \"../TagPill\";\n\nexport default function TagPillExample() {\n  return (\n    <div className=\"p-4 flex flex-wrap gap-2\">\n      <TagPill label=\"Health\" />\n      <TagPill label=\"Psychology\" selected />\n      <TagPill label=\"Technology\" onRemove={() => console.log(\"Remove\")} />\n      <TagPill label=\"Environment\" selected onRemove={() => console.log(\"Remove\")} />\n    </div>\n  );\n}\n","size_bytes":399}},"version":2}